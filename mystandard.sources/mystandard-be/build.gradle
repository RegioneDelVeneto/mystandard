
plugins {
    id 'java'
    id 'org.springframework.boot'
    id 'io.spring.dependency-management'
    id 'maven-publish'

}

repositories {
    mavenLocal()
    mavenCentral()
}

ext {
    swaggerVersion = "1.4.4"
    owlApiVersion = "5.1.16"
    jenaVersion = "3.17.0"
    ontapiVersion = "2.1.0"
    awsVersion = "1.9.2"
    commonsLangVersion = "2.6"
    jsonVersion = "20200518"
    logstashVersion = "6.4"
    esVersion = "7.6.2"
    jjwtVersion = "0.11.2"
    springSaml2Version = "1.0.10.RELEASE"
    openSamlVersion = "springSaml2Version"
    springBootBucket4jVersion = "0.2.0"
    caffeineVersion = "2.8.8"
    bucket4jVersion = "6.0.1"
    myprofileClientVersion = "1.0.2"
    myboxClientVersion = "1.0.0"
    commonsClientVersion = "1.1.2"
    sslContextVersion = "6.8.0"
}

configurations {
    compile.exclude module: 'tomcat-annotations-api'
    [apiElements, runtimeElements].each {
        it.outgoing.artifacts.removeIf { it.buildDependencies.getDependencies(null).contains(jar) }
        it.outgoing.artifact(bootJar)
    }
    all {
        resolutionStrategy {
            dependencySubstitution {
                substitute module('org.elasticsearch:elasticsearch') with module("org.elasticsearch:elasticsearch:$esVersion")
            }
        }
    }
}

group = 'it.regioneveneto.myp3'
version = '1.1.3'
description = 'MyStandard - Java bootable jar'
sourceCompatibility = 11
targetCompatibility = 11


bootJar {
    archiveFileName = "${rootProject.name}-${archiveVersion.get()}.${archiveExtension.get()}"
}

dependencies {


    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    implementation 'org.springframework.boot:spring-boot-starter-tomcat'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'


    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.springframework.security:spring-security-test'

    compile "org.springdoc:springdoc-openapi-ui:$swaggerVersion"

    compile "org.apache.jena:jena-arq:$jenaVersion"
    compile "org.apache.jena:jena-tdb:$jenaVersion"
    compile "org.apache.jena:jena-rdfconnection:$jenaVersion"
    compile "org.apache.jena:jena-querybuilder:$jenaVersion"
    compile "com.github.owlcs:ontapi:$ontapiVersion"

    // Throttling
    compile "com.giffing.bucket4j.spring.boot.starter:bucket4j-spring-boot-starter:$springBootBucket4jVersion"
    compile "javax.cache:cache-api:1.1.1"
    compile "com.github.ben-manes.caffeine:caffeine:$caffeineVersion"
    compile "com.github.ben-manes.caffeine:jcache:$caffeineVersion"
    compile "com.github.vladimir-bukhtoyarov:bucket4j-core:$bucket4jVersion"


    //SSLcontext
    compile "io.github.hakky54:sslcontext-kickstart:$sslContextVersion"
    compile "com.amazonaws:aws-java-sdk:$awsVersion"
    compile "commons-lang:commons-lang:$commonsLangVersion"
    compile "org.json:json:$jsonVersion"
    compile "net.logstash.logback:logstash-logback-encoder:$logstashVersion"
    compile "org.elasticsearch.client:elasticsearch-rest-high-level-client:$esVersion"
    compile "org.elasticsearch:elasticsearch:$esVersion"

    // jwt
    compile "io.jsonwebtoken:jjwt-api:$jjwtVersion"
    runtimeOnly "io.jsonwebtoken:jjwt-impl:$jjwtVersion"
    runtimeOnly "io.jsonwebtoken:jjwt-jackson:$jjwtVersion"

    // SAML2
    implementation 'org.springframework.security.extensions:spring-security-saml2-core:1.0.10.RELEASE' // SAML2
    implementation 'org.opensaml:opensaml:2.6.4'

    //RVE LIB
    implementation fileTree(dir: 'lib', include: ['*.jar'])

}

publish {
    dependsOn assemble
}

publishToMavenLocal {
    dependsOn assemble
}


publishing {
    publications {
        maven(MavenPublication) {
            artifactId="${rootProject.name}"
            from(components.java)
        }
    }

}
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
tasks.register('processFrontendResources', Copy) {
    // Directory containing the artifacts in the frontend project
    def frontendBuildDir = file("${project(':mystandard-fe').buildDir}/www")
    // Directory where the frontend artifacts must be copied to be packaged alltogether with the backend by the 'war'
    // plugin.
    def frontendResourcesDir = file("${project.buildDir}/resources/main/public")

    group 'Frontend'
    description 'Process frontend resources'
    dependsOn project(':mystandard-fe').tasks.named('assembleFrontend')

    from frontendBuildDir
    into frontendResourcesDir
}

tasks.named('processResources') {
    dependsOn tasks.named('processFrontendResources')
}
